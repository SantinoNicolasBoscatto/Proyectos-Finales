// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NascarPage;

#nullable disable

namespace NascarPage.Migrations
{
    [DbContext(typeof(Negocio))]
    [Migration("20240827191545_NacionalidadPiloto")]
    partial class NacionalidadPiloto
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("NascarPage.Entitys.Auto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Foto")
                        .HasColumnType("TEXT");

                    b.Property<int>("MarcaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PilotoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.HasIndex("PilotoId")
                        .IsUnique();

                    b.ToTable("Autos");
                });

            modelBuilder.Entity("NascarPage.Entitys.Calendario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadDeEventos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventoActual")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Calendario");
                });

            modelBuilder.Entity("NascarPage.Entitys.Campeon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AutoCampeon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PilotoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PilotoId");

                    b.ToTable("Campeones");
                });

            modelBuilder.Entity("NascarPage.Entitys.Carrera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Evento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Finish")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Laps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Led")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Piloto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Puntos")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Qual")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Start")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Carreras");
                });

            modelBuilder.Entity("NascarPage.Entitys.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("NascarPage.Entitys.Nacionalidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bandera")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Nacionalidades");
                });

            modelBuilder.Entity("NascarPage.Entitys.Piloto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Campeonatos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarrerasGanadas")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnActivo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FotoPiloto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NacionalidadId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Numero")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("Poles")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Top10s")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Top5s")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NacionalidadId");

                    b.ToTable("Pilotos");
                });

            modelBuilder.Entity("NascarPage.Entitys.Pista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Disputada")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Distancia")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnElCalendario")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FotoPrimaria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FotoSecundaria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FotoTerciaria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Orden")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Vueltas")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Orden")
                        .IsUnique();

                    b.ToTable("Pistas");
                });

            modelBuilder.Entity("NascarPage.Entitys.PosicionCampeonatoRegular", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Behind")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DNF")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LapsLead")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarcaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PilotoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Poles")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Puntos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Top10s")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Top5s")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Wins")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.HasIndex("PilotoId");

                    b.ToTable("TablaPosicionesCampeonatoRegular");
                });

            modelBuilder.Entity("NascarPage.Entitys.PosicionManofactura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarcaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Puntos")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId")
                        .IsUnique();

                    b.ToTable("TablaPosicionesManofactura");
                });

            modelBuilder.Entity("NascarPage.Entitys.PosicionPlayoff", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BehindPlayoff")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Clasificado12avos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Clasificado16avos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Clasificado8avos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ClasificadoFinal4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarcaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PilotoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PuntosPlayoff")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.HasIndex("PilotoId");

                    b.ToTable("TablaPosicionesPlayoff");
                });

            modelBuilder.Entity("NascarPage.Entitys.Auto", b =>
                {
                    b.HasOne("NascarPage.Entitys.Marca", "Marca")
                        .WithMany("ListaAutos")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NascarPage.Entitys.Piloto", "Piloto")
                        .WithOne("Auto")
                        .HasForeignKey("NascarPage.Entitys.Auto", "PilotoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Marca");

                    b.Navigation("Piloto");
                });

            modelBuilder.Entity("NascarPage.Entitys.Campeon", b =>
                {
                    b.HasOne("NascarPage.Entitys.Piloto", "Piloto")
                        .WithMany()
                        .HasForeignKey("PilotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Piloto");
                });

            modelBuilder.Entity("NascarPage.Entitys.Piloto", b =>
                {
                    b.HasOne("NascarPage.Entitys.Nacionalidad", "Nacionalidad")
                        .WithMany("ListaPilotos")
                        .HasForeignKey("NacionalidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nacionalidad");
                });

            modelBuilder.Entity("NascarPage.Entitys.PosicionCampeonatoRegular", b =>
                {
                    b.HasOne("NascarPage.Entitys.Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NascarPage.Entitys.Piloto", "Piloto")
                        .WithMany()
                        .HasForeignKey("PilotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");

                    b.Navigation("Piloto");
                });

            modelBuilder.Entity("NascarPage.Entitys.PosicionManofactura", b =>
                {
                    b.HasOne("NascarPage.Entitys.Marca", "Marca")
                        .WithOne("PosicionManofactura")
                        .HasForeignKey("NascarPage.Entitys.PosicionManofactura", "MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("NascarPage.Entitys.PosicionPlayoff", b =>
                {
                    b.HasOne("NascarPage.Entitys.PosicionCampeonatoRegular", "Regular")
                        .WithOne("Playoff")
                        .HasForeignKey("NascarPage.Entitys.PosicionPlayoff", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NascarPage.Entitys.Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NascarPage.Entitys.Piloto", "Piloto")
                        .WithMany()
                        .HasForeignKey("PilotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");

                    b.Navigation("Piloto");

                    b.Navigation("Regular");
                });

            modelBuilder.Entity("NascarPage.Entitys.Marca", b =>
                {
                    b.Navigation("ListaAutos");

                    b.Navigation("PosicionManofactura")
                        .IsRequired();
                });

            modelBuilder.Entity("NascarPage.Entitys.Nacionalidad", b =>
                {
                    b.Navigation("ListaPilotos");
                });

            modelBuilder.Entity("NascarPage.Entitys.Piloto", b =>
                {
                    b.Navigation("Auto")
                        .IsRequired();
                });

            modelBuilder.Entity("NascarPage.Entitys.PosicionCampeonatoRegular", b =>
                {
                    b.Navigation("Playoff")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
