// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/autor.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace PruebaMicroservicios.Autor.Presentation {
  public static partial class Autor
  {
    static readonly string __ServiceName = "Autor";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdRequest> __Marshaller_GetAutorByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdResponse> __Marshaller_GetAutorByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::PruebaMicroservicios.Autor.Presentation.GetAllAutorRequest> __Marshaller_GetAllAutorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PruebaMicroservicios.Autor.Presentation.GetAllAutorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::PruebaMicroservicios.Autor.Presentation.GetAllAutorResponse> __Marshaller_GetAllAutorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PruebaMicroservicios.Autor.Presentation.GetAllAutorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::PruebaMicroservicios.Autor.Presentation.CreateAutorRequest> __Marshaller_CreateAutorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PruebaMicroservicios.Autor.Presentation.CreateAutorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::PruebaMicroservicios.Autor.Presentation.CreateAutorResponse> __Marshaller_CreateAutorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PruebaMicroservicios.Autor.Presentation.CreateAutorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::PruebaMicroservicios.Autor.Presentation.UpdateAutorRequest> __Marshaller_UpdateAutorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PruebaMicroservicios.Autor.Presentation.UpdateAutorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::PruebaMicroservicios.Autor.Presentation.UpdateAutorResponse> __Marshaller_UpdateAutorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PruebaMicroservicios.Autor.Presentation.UpdateAutorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::PruebaMicroservicios.Autor.Presentation.DeleteAutorRequest> __Marshaller_DeleteAutorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PruebaMicroservicios.Autor.Presentation.DeleteAutorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::PruebaMicroservicios.Autor.Presentation.DeleteAutorResponse> __Marshaller_DeleteAutorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PruebaMicroservicios.Autor.Presentation.DeleteAutorResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdRequest, global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdResponse> __Method_GetAutor = new grpc::Method<global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdRequest, global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAutor",
        __Marshaller_GetAutorByIdRequest,
        __Marshaller_GetAutorByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::PruebaMicroservicios.Autor.Presentation.GetAllAutorRequest, global::PruebaMicroservicios.Autor.Presentation.GetAllAutorResponse> __Method_GetAllAutor = new grpc::Method<global::PruebaMicroservicios.Autor.Presentation.GetAllAutorRequest, global::PruebaMicroservicios.Autor.Presentation.GetAllAutorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllAutor",
        __Marshaller_GetAllAutorRequest,
        __Marshaller_GetAllAutorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::PruebaMicroservicios.Autor.Presentation.CreateAutorRequest, global::PruebaMicroservicios.Autor.Presentation.CreateAutorResponse> __Method_CreateAutor = new grpc::Method<global::PruebaMicroservicios.Autor.Presentation.CreateAutorRequest, global::PruebaMicroservicios.Autor.Presentation.CreateAutorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAutor",
        __Marshaller_CreateAutorRequest,
        __Marshaller_CreateAutorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::PruebaMicroservicios.Autor.Presentation.UpdateAutorRequest, global::PruebaMicroservicios.Autor.Presentation.UpdateAutorResponse> __Method_UpdateAutor = new grpc::Method<global::PruebaMicroservicios.Autor.Presentation.UpdateAutorRequest, global::PruebaMicroservicios.Autor.Presentation.UpdateAutorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAutor",
        __Marshaller_UpdateAutorRequest,
        __Marshaller_UpdateAutorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::PruebaMicroservicios.Autor.Presentation.DeleteAutorRequest, global::PruebaMicroservicios.Autor.Presentation.DeleteAutorResponse> __Method_DeleteAutor = new grpc::Method<global::PruebaMicroservicios.Autor.Presentation.DeleteAutorRequest, global::PruebaMicroservicios.Autor.Presentation.DeleteAutorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAutor",
        __Marshaller_DeleteAutorRequest,
        __Marshaller_DeleteAutorResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PruebaMicroservicios.Autor.Presentation.AutorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Autor</summary>
    [grpc::BindServiceMethod(typeof(Autor), "BindService")]
    public abstract partial class AutorBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdResponse> GetAutor(global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::PruebaMicroservicios.Autor.Presentation.GetAllAutorResponse> GetAllAutor(global::PruebaMicroservicios.Autor.Presentation.GetAllAutorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::PruebaMicroservicios.Autor.Presentation.CreateAutorResponse> CreateAutor(global::PruebaMicroservicios.Autor.Presentation.CreateAutorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::PruebaMicroservicios.Autor.Presentation.UpdateAutorResponse> UpdateAutor(global::PruebaMicroservicios.Autor.Presentation.UpdateAutorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::PruebaMicroservicios.Autor.Presentation.DeleteAutorResponse> DeleteAutor(global::PruebaMicroservicios.Autor.Presentation.DeleteAutorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AutorBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAutor, serviceImpl.GetAutor)
          .AddMethod(__Method_GetAllAutor, serviceImpl.GetAllAutor)
          .AddMethod(__Method_CreateAutor, serviceImpl.CreateAutor)
          .AddMethod(__Method_UpdateAutor, serviceImpl.UpdateAutor)
          .AddMethod(__Method_DeleteAutor, serviceImpl.DeleteAutor).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AutorBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAutor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdRequest, global::PruebaMicroservicios.Autor.Presentation.GetAutorByIdResponse>(serviceImpl.GetAutor));
      serviceBinder.AddMethod(__Method_GetAllAutor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PruebaMicroservicios.Autor.Presentation.GetAllAutorRequest, global::PruebaMicroservicios.Autor.Presentation.GetAllAutorResponse>(serviceImpl.GetAllAutor));
      serviceBinder.AddMethod(__Method_CreateAutor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PruebaMicroservicios.Autor.Presentation.CreateAutorRequest, global::PruebaMicroservicios.Autor.Presentation.CreateAutorResponse>(serviceImpl.CreateAutor));
      serviceBinder.AddMethod(__Method_UpdateAutor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PruebaMicroservicios.Autor.Presentation.UpdateAutorRequest, global::PruebaMicroservicios.Autor.Presentation.UpdateAutorResponse>(serviceImpl.UpdateAutor));
      serviceBinder.AddMethod(__Method_DeleteAutor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PruebaMicroservicios.Autor.Presentation.DeleteAutorRequest, global::PruebaMicroservicios.Autor.Presentation.DeleteAutorResponse>(serviceImpl.DeleteAutor));
    }

  }
}
#endregion
